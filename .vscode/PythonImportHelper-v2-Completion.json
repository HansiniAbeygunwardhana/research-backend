[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "cloudinary_storage",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "cloudinary_storage",
        "description": "cloudinary_storage",
        "detail": "cloudinary_storage",
        "documentation": {}
    },
    {
        "label": "cloudinary",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "cloudinary",
        "description": "cloudinary",
        "detail": "cloudinary",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "routers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "viewsets",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "viewsets",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "IntegrityError",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "transaction",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "JWTAuthentication",
        "importPath": "users.authentication",
        "description": "users.authentication",
        "isExtraImport": true,
        "detail": "users.authentication",
        "documentation": {}
    },
    {
        "label": "JWTAuthentication",
        "importPath": "users.authentication",
        "description": "users.authentication",
        "isExtraImport": true,
        "detail": "users.authentication",
        "documentation": {}
    },
    {
        "label": "JWTAuthentication",
        "importPath": "users.authentication",
        "description": "users.authentication",
        "isExtraImport": true,
        "detail": "users.authentication",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "APIView",
        "importPath": "rest_framework.views",
        "description": "rest_framework.views",
        "isExtraImport": true,
        "detail": "rest_framework.views",
        "documentation": {}
    },
    {
        "label": "APIView",
        "importPath": "rest_framework.views",
        "description": "rest_framework.views",
        "isExtraImport": true,
        "detail": "rest_framework.views",
        "documentation": {}
    },
    {
        "label": "APIView",
        "importPath": "rest_framework.views",
        "description": "rest_framework.views",
        "isExtraImport": true,
        "detail": "rest_framework.views",
        "documentation": {}
    },
    {
        "label": "APIView",
        "importPath": "rest_framework.views",
        "description": "rest_framework.views",
        "isExtraImport": true,
        "detail": "rest_framework.views",
        "documentation": {}
    },
    {
        "label": "APIView",
        "importPath": "rest_framework.views",
        "description": "rest_framework.views",
        "isExtraImport": true,
        "detail": "rest_framework.views",
        "documentation": {}
    },
    {
        "label": "APIView",
        "importPath": "rest_framework.views",
        "description": "rest_framework.views",
        "isExtraImport": true,
        "detail": "rest_framework.views",
        "documentation": {}
    },
    {
        "label": "IsAuthenticated",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "IsAuthenticated",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "IsAuthenticated",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "AllowAny",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "SessionAuthentication",
        "importPath": "rest_framework.authentication",
        "description": "rest_framework.authentication",
        "isExtraImport": true,
        "detail": "rest_framework.authentication",
        "documentation": {}
    },
    {
        "label": "BaseAuthentication",
        "importPath": "rest_framework.authentication",
        "description": "rest_framework.authentication",
        "isExtraImport": true,
        "detail": "rest_framework.authentication",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "django.db.models.deletion",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.db.models.deletion",
        "description": "django.db.models.deletion",
        "detail": "django.db.models.deletion",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "UserProfile",
        "importPath": "recommandation.models",
        "description": "recommandation.models",
        "isExtraImport": true,
        "detail": "recommandation.models",
        "documentation": {}
    },
    {
        "label": "UserProfile",
        "importPath": "recommandation.models",
        "description": "recommandation.models",
        "isExtraImport": true,
        "detail": "recommandation.models",
        "documentation": {}
    },
    {
        "label": "UserProfile",
        "importPath": "recommandation.models",
        "description": "recommandation.models",
        "isExtraImport": true,
        "detail": "recommandation.models",
        "documentation": {}
    },
    {
        "label": "Recipe",
        "importPath": "recommandation.models",
        "description": "recommandation.models",
        "isExtraImport": true,
        "detail": "recommandation.models",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "TfidfVectorizer",
        "importPath": "sklearn.feature_extraction.text",
        "description": "sklearn.feature_extraction.text",
        "isExtraImport": true,
        "detail": "sklearn.feature_extraction.text",
        "documentation": {}
    },
    {
        "label": "TfidfVectorizer",
        "importPath": "sklearn.feature_extraction.text",
        "description": "sklearn.feature_extraction.text",
        "isExtraImport": true,
        "detail": "sklearn.feature_extraction.text",
        "documentation": {}
    },
    {
        "label": "TfidfVectorizer",
        "importPath": "sklearn.feature_extraction.text",
        "description": "sklearn.feature_extraction.text",
        "isExtraImport": true,
        "detail": "sklearn.feature_extraction.text",
        "documentation": {}
    },
    {
        "label": "TfidfVectorizer",
        "importPath": "sklearn.feature_extraction.text",
        "description": "sklearn.feature_extraction.text",
        "isExtraImport": true,
        "detail": "sklearn.feature_extraction.text",
        "documentation": {}
    },
    {
        "label": "mysql.connector",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "mysql.connector",
        "description": "mysql.connector",
        "detail": "mysql.connector",
        "documentation": {}
    },
    {
        "label": "joblib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "joblib",
        "description": "joblib",
        "detail": "joblib",
        "documentation": {}
    },
    {
        "label": "cloudinary.models",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "cloudinary.models",
        "description": "cloudinary.models",
        "detail": "cloudinary.models",
        "documentation": {}
    },
    {
        "label": "CloudinaryField",
        "importPath": "cloudinary.models",
        "description": "cloudinary.models",
        "isExtraImport": true,
        "detail": "cloudinary.models",
        "documentation": {}
    },
    {
        "label": "post_save",
        "importPath": "django.db.models.signals",
        "description": "django.db.models.signals",
        "isExtraImport": true,
        "detail": "django.db.models.signals",
        "documentation": {}
    },
    {
        "label": "receiver",
        "importPath": "django.dispatch",
        "description": "django.dispatch",
        "isExtraImport": true,
        "detail": "django.dispatch",
        "documentation": {}
    },
    {
        "label": "Meal",
        "importPath": "meals.models",
        "description": "meals.models",
        "isExtraImport": true,
        "detail": "meals.models",
        "documentation": {}
    },
    {
        "label": "Meal",
        "importPath": "meals.models",
        "description": "meals.models",
        "isExtraImport": true,
        "detail": "meals.models",
        "documentation": {}
    },
    {
        "label": "Meal",
        "importPath": "meals.models",
        "description": "meals.models",
        "isExtraImport": true,
        "detail": "meals.models",
        "documentation": {}
    },
    {
        "label": "keyword",
        "importPath": "meals.models",
        "description": "meals.models",
        "isExtraImport": true,
        "detail": "meals.models",
        "documentation": {}
    },
    {
        "label": "Meal",
        "importPath": "meals.models",
        "description": "meals.models",
        "isExtraImport": true,
        "detail": "meals.models",
        "documentation": {}
    },
    {
        "label": "Meal",
        "importPath": "meals.models",
        "description": "meals.models",
        "isExtraImport": true,
        "detail": "meals.models",
        "documentation": {}
    },
    {
        "label": "Dataset",
        "importPath": "surprise",
        "description": "surprise",
        "isExtraImport": true,
        "detail": "surprise",
        "documentation": {}
    },
    {
        "label": "Reader",
        "importPath": "surprise",
        "description": "surprise",
        "isExtraImport": true,
        "detail": "surprise",
        "documentation": {}
    },
    {
        "label": "SVD",
        "importPath": "surprise",
        "description": "surprise",
        "isExtraImport": true,
        "detail": "surprise",
        "documentation": {}
    },
    {
        "label": "Dataset",
        "importPath": "surprise",
        "description": "surprise",
        "isExtraImport": true,
        "detail": "surprise",
        "documentation": {}
    },
    {
        "label": "Reader",
        "importPath": "surprise",
        "description": "surprise",
        "isExtraImport": true,
        "detail": "surprise",
        "documentation": {}
    },
    {
        "label": "SVD",
        "importPath": "surprise",
        "description": "surprise",
        "isExtraImport": true,
        "detail": "surprise",
        "documentation": {}
    },
    {
        "label": "HttpRequest",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpRequest",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "MealSerializerBasic",
        "importPath": "meals.serializers",
        "description": "meals.serializers",
        "isExtraImport": true,
        "detail": "meals.serializers",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "jwt",
        "description": "jwt",
        "detail": "jwt",
        "documentation": {}
    },
    {
        "label": "AuthenticationFailed",
        "importPath": "rest_framework.exceptions",
        "description": "rest_framework.exceptions",
        "isExtraImport": true,
        "detail": "rest_framework.exceptions",
        "documentation": {}
    },
    {
        "label": "AuthenticationFailed",
        "importPath": "rest_framework.exceptions",
        "description": "rest_framework.exceptions",
        "isExtraImport": true,
        "detail": "rest_framework.exceptions",
        "documentation": {}
    },
    {
        "label": "JWTLoginView",
        "importPath": "users.views",
        "description": "users.views",
        "isExtraImport": true,
        "detail": "users.views",
        "documentation": {}
    },
    {
        "label": "RegisterView",
        "importPath": "users.views",
        "description": "users.views",
        "isExtraImport": true,
        "detail": "users.views",
        "documentation": {}
    },
    {
        "label": "LogoutView",
        "importPath": "users.views",
        "description": "users.views",
        "isExtraImport": true,
        "detail": "users.views",
        "documentation": {}
    },
    {
        "label": "ResetPasswordView",
        "importPath": "users.views",
        "description": "users.views",
        "isExtraImport": true,
        "detail": "users.views",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "backend.asgi",
        "description": "backend.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "backend.asgi",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "backend.settings",
        "description": "backend.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = \"django-insecure-o56l2jg2#4t1uvu=*k4orm94x%2ib+)1d1j9w8j597azjlm^zk\"\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [",
        "detail": "backend.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "backend.settings",
        "description": "backend.settings",
        "peekOfCode": "SECRET_KEY = \"django-insecure-o56l2jg2#4t1uvu=*k4orm94x%2ib+)1d1j9w8j597azjlm^zk\"\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'jazzmin',\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",",
        "detail": "backend.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "backend.settings",
        "description": "backend.settings",
        "peekOfCode": "DEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'jazzmin',\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",\n    \"django.contrib.messages\",",
        "detail": "backend.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "backend.settings",
        "description": "backend.settings",
        "peekOfCode": "ALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'jazzmin',\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",\n    \"django.contrib.messages\",\n    \"django.contrib.staticfiles\",",
        "detail": "backend.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "backend.settings",
        "description": "backend.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    'jazzmin',\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",\n    \"django.contrib.messages\",\n    \"django.contrib.staticfiles\",\n    'rest_framework',\n    \"corsheaders\",",
        "detail": "backend.settings",
        "documentation": {}
    },
    {
        "label": "REST_FRAMEWORK",
        "kind": 5,
        "importPath": "backend.settings",
        "description": "backend.settings",
        "peekOfCode": "REST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'users.authentication.JWTAuthentication',\n    ),\n}\nMIDDLEWARE = [\n    \"corsheaders.middleware.CorsMiddleware\",\n    \"django.middleware.common.CommonMiddleware\",\n    \"django.middleware.security.SecurityMiddleware\",\n    \"django.contrib.sessions.middleware.SessionMiddleware\",",
        "detail": "backend.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "backend.settings",
        "description": "backend.settings",
        "peekOfCode": "MIDDLEWARE = [\n    \"corsheaders.middleware.CorsMiddleware\",\n    \"django.middleware.common.CommonMiddleware\",\n    \"django.middleware.security.SecurityMiddleware\",\n    \"django.contrib.sessions.middleware.SessionMiddleware\",\n    \"django.middleware.common.CommonMiddleware\",\n    \"django.middleware.csrf.CsrfViewMiddleware\",\n    \"django.contrib.auth.middleware.AuthenticationMiddleware\",\n    \"django.contrib.messages.middleware.MessageMiddleware\",\n    \"django.middleware.clickjacking.XFrameOptionsMiddleware\",",
        "detail": "backend.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "backend.settings",
        "description": "backend.settings",
        "peekOfCode": "ROOT_URLCONF = \"backend.urls\"\nTEMPLATES = [\n    {\n        \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n        \"DIRS\": [],\n        \"APP_DIRS\": True,\n        \"OPTIONS\": {\n            \"context_processors\": [\n                \"django.template.context_processors.debug\",\n                \"django.template.context_processors.request\",",
        "detail": "backend.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "backend.settings",
        "description": "backend.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n        \"DIRS\": [],\n        \"APP_DIRS\": True,\n        \"OPTIONS\": {\n            \"context_processors\": [\n                \"django.template.context_processors.debug\",\n                \"django.template.context_processors.request\",\n                \"django.contrib.auth.context_processors.auth\",",
        "detail": "backend.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "backend.settings",
        "description": "backend.settings",
        "peekOfCode": "WSGI_APPLICATION = \"backend.wsgi.application\"\n# Database\n# https://docs.djangoproject.com/en/4.2/ref/settings/#databases\nDATABASES = {\n    'default': {  \n        'ENGINE': 'django.db.backends.mysql',  \n        'NAME': 'research_db',  \n        'USER': 'root',  \n        'PASSWORD': 'root',  \n        'HOST': '127.0.0.1',  ",
        "detail": "backend.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "backend.settings",
        "description": "backend.settings",
        "peekOfCode": "DATABASES = {\n    'default': {  \n        'ENGINE': 'django.db.backends.mysql',  \n        'NAME': 'research_db',  \n        'USER': 'root',  \n        'PASSWORD': 'root',  \n        'HOST': '127.0.0.1',  \n        'PORT': '3306',  \n        'OPTIONS': {  \n            'init_command': \"SET sql_mode='STRICT_TRANS_TABLES'\"  ",
        "detail": "backend.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "backend.settings",
        "description": "backend.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.UserAttributeSimilarityValidator\",\n    },\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.MinimumLengthValidator\",\n    },\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.CommonPasswordValidator\",\n    },",
        "detail": "backend.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "backend.settings",
        "description": "backend.settings",
        "peekOfCode": "LANGUAGE_CODE = \"en-us\"\nTIME_ZONE = \"UTC\"\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = \"static/\"\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"",
        "detail": "backend.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "backend.settings",
        "description": "backend.settings",
        "peekOfCode": "TIME_ZONE = \"UTC\"\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = \"static/\"\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"\nCORS_ALLOWED_ORIGINS = [",
        "detail": "backend.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "backend.settings",
        "description": "backend.settings",
        "peekOfCode": "USE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = \"static/\"\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"\nCORS_ALLOWED_ORIGINS = [\n    \"http://localhost:5173\",",
        "detail": "backend.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "backend.settings",
        "description": "backend.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = \"static/\"\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"\nCORS_ALLOWED_ORIGINS = [\n    \"http://localhost:5173\",\n    \"https://sub.example.com\",",
        "detail": "backend.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "backend.settings",
        "description": "backend.settings",
        "peekOfCode": "STATIC_URL = \"static/\"\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"\nCORS_ALLOWED_ORIGINS = [\n    \"http://localhost:5173\",\n    \"https://sub.example.com\",\n    \"http://localhost:8080\",\n]\n# JWT settings",
        "detail": "backend.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "backend.settings",
        "description": "backend.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"\nCORS_ALLOWED_ORIGINS = [\n    \"http://localhost:5173\",\n    \"https://sub.example.com\",\n    \"http://localhost:8080\",\n]\n# JWT settings\nJWT_SECRET_KEY = 'your_secret_key'  # Replace with your actual secret key\nJWT_ALGORITHM = 'HS256'\nJWT_EXPIRATION_DELTA = datetime.timedelta(hours=1)  # Token expiration time",
        "detail": "backend.settings",
        "documentation": {}
    },
    {
        "label": "CORS_ALLOWED_ORIGINS",
        "kind": 5,
        "importPath": "backend.settings",
        "description": "backend.settings",
        "peekOfCode": "CORS_ALLOWED_ORIGINS = [\n    \"http://localhost:5173\",\n    \"https://sub.example.com\",\n    \"http://localhost:8080\",\n]\n# JWT settings\nJWT_SECRET_KEY = 'your_secret_key'  # Replace with your actual secret key\nJWT_ALGORITHM = 'HS256'\nJWT_EXPIRATION_DELTA = datetime.timedelta(hours=1)  # Token expiration time\nCLOUDINARY_STORAGE = {",
        "detail": "backend.settings",
        "documentation": {}
    },
    {
        "label": "JWT_SECRET_KEY",
        "kind": 5,
        "importPath": "backend.settings",
        "description": "backend.settings",
        "peekOfCode": "JWT_SECRET_KEY = 'your_secret_key'  # Replace with your actual secret key\nJWT_ALGORITHM = 'HS256'\nJWT_EXPIRATION_DELTA = datetime.timedelta(hours=1)  # Token expiration time\nCLOUDINARY_STORAGE = {\n    'CLOUD_NAME': 'dfvhftecz',\n    'API_KEY' : '859767759188636' ,\n    'API_SECRET' : '0shsAbsyZMqv5xgbcml8FCM48sQ'\n}\nDEFAULT_FILE_STORAGE = 'cloudinary_storage.storage.MediaCloudinaryStorage'\nimport cloudinary",
        "detail": "backend.settings",
        "documentation": {}
    },
    {
        "label": "JWT_ALGORITHM",
        "kind": 5,
        "importPath": "backend.settings",
        "description": "backend.settings",
        "peekOfCode": "JWT_ALGORITHM = 'HS256'\nJWT_EXPIRATION_DELTA = datetime.timedelta(hours=1)  # Token expiration time\nCLOUDINARY_STORAGE = {\n    'CLOUD_NAME': 'dfvhftecz',\n    'API_KEY' : '859767759188636' ,\n    'API_SECRET' : '0shsAbsyZMqv5xgbcml8FCM48sQ'\n}\nDEFAULT_FILE_STORAGE = 'cloudinary_storage.storage.MediaCloudinaryStorage'\nimport cloudinary\ncloudinary.config( ",
        "detail": "backend.settings",
        "documentation": {}
    },
    {
        "label": "JWT_EXPIRATION_DELTA",
        "kind": 5,
        "importPath": "backend.settings",
        "description": "backend.settings",
        "peekOfCode": "JWT_EXPIRATION_DELTA = datetime.timedelta(hours=1)  # Token expiration time\nCLOUDINARY_STORAGE = {\n    'CLOUD_NAME': 'dfvhftecz',\n    'API_KEY' : '859767759188636' ,\n    'API_SECRET' : '0shsAbsyZMqv5xgbcml8FCM48sQ'\n}\nDEFAULT_FILE_STORAGE = 'cloudinary_storage.storage.MediaCloudinaryStorage'\nimport cloudinary\ncloudinary.config( \n  cloud_name = \"dfvhftecz\", ",
        "detail": "backend.settings",
        "documentation": {}
    },
    {
        "label": "CLOUDINARY_STORAGE",
        "kind": 5,
        "importPath": "backend.settings",
        "description": "backend.settings",
        "peekOfCode": "CLOUDINARY_STORAGE = {\n    'CLOUD_NAME': 'dfvhftecz',\n    'API_KEY' : '859767759188636' ,\n    'API_SECRET' : '0shsAbsyZMqv5xgbcml8FCM48sQ'\n}\nDEFAULT_FILE_STORAGE = 'cloudinary_storage.storage.MediaCloudinaryStorage'\nimport cloudinary\ncloudinary.config( \n  cloud_name = \"dfvhftecz\", \n  api_key = \"454366385488942\", ",
        "detail": "backend.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_FILE_STORAGE",
        "kind": 5,
        "importPath": "backend.settings",
        "description": "backend.settings",
        "peekOfCode": "DEFAULT_FILE_STORAGE = 'cloudinary_storage.storage.MediaCloudinaryStorage'\nimport cloudinary\ncloudinary.config( \n  cloud_name = \"dfvhftecz\", \n  api_key = \"454366385488942\", \n  api_secret = \"0shsAbsyZMqv5xgbcml8FCM48sQ\" \n)",
        "detail": "backend.settings",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "backend.urls",
        "description": "backend.urls",
        "peekOfCode": "urlpatterns = [\n    path(\"admin/\", admin.site.urls),\n    path('api-auth/', include('rest_framework.urls')),\n    path(\"cat/\", include(\"categories.urls\")),\n    path(\"meals/\", include(\"meals.urls\")),\n    path(\"auth/\", include(\"users.urls\")),\n    path(\"search/\", include(\"recommandation.urls\")),\n    path(\"health/\" , include(\"healthprofiles.urls\")),\n    path(\"order/\" , include(\"orders.urls\"))\n]",
        "detail": "backend.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "backend.wsgi",
        "description": "backend.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "backend.wsgi",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "categories.migrations.0001_initial",
        "description": "categories.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Category',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('name', models.CharField(max_length=100)),",
        "detail": "categories.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "CategoriesConfig",
        "kind": 6,
        "importPath": "categories.apps",
        "description": "categories.apps",
        "peekOfCode": "class CategoriesConfig(AppConfig):\n    default_auto_field = \"django.db.models.BigAutoField\"\n    name = \"categories\"",
        "detail": "categories.apps",
        "documentation": {}
    },
    {
        "label": "Category",
        "kind": 6,
        "importPath": "categories.models",
        "description": "categories.models",
        "peekOfCode": "class Category(models.Model):\n    name = models.CharField(max_length=100, null=False)\n    created_at = models.DateTimeField(auto_now_add=True)\n    def __str__(self) -> str:\n        return self.name",
        "detail": "categories.models",
        "documentation": {}
    },
    {
        "label": "CategorySerializer",
        "kind": 6,
        "importPath": "categories.serializer",
        "description": "categories.serializer",
        "peekOfCode": "class CategorySerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Category\n        fields = '__all__'",
        "detail": "categories.serializer",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "categories.urls",
        "description": "categories.urls",
        "peekOfCode": "urlpatterns = [\n    path('', CategoryViewSet.as_view() , name='categories'),\n    path('<int:pk>', CategoryViewSet.as_view() , name='categoriesbyid'),\n]",
        "detail": "categories.urls",
        "documentation": {}
    },
    {
        "label": "CategoryViewSet",
        "kind": 6,
        "importPath": "categories.views",
        "description": "categories.views",
        "peekOfCode": "class CategoryViewSet(APIView):\n    authentication_classes = [SessionAuthentication , JWTAuthentication]\n    permission_classes = [IsAuthenticated]\n    def post(self, request):\n        serializer = CategorySerializer(data=request.data)\n        if serializer.is_valid():\n            serializer.save()\n            return Response(serializer.data , status=status.HTTP_201_CREATED) \n        return Response(serializer.errors , status=status.HTTP_400_BAD_REQUEST)\n    def get(self, request , pk=None):",
        "detail": "categories.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "healthprofiles.migrations.0001_initial",
        "description": "healthprofiles.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name=\"HealthProfile\",\n            fields=[\n                (",
        "detail": "healthprofiles.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "HealthprofilesConfig",
        "kind": 6,
        "importPath": "healthprofiles.apps",
        "description": "healthprofiles.apps",
        "peekOfCode": "class HealthprofilesConfig(AppConfig):\n    default_auto_field = \"django.db.models.BigAutoField\"\n    name = \"healthprofiles\"",
        "detail": "healthprofiles.apps",
        "documentation": {}
    },
    {
        "label": "HealthProfile",
        "kind": 6,
        "importPath": "healthprofiles.models",
        "description": "healthprofiles.models",
        "peekOfCode": "class HealthProfile(models.Model):\n    calories = models.FloatField(null=False , default=0)\n    carbohydrateContent = models.FloatField(null=False , default=0)\n    cholesterolContent = models.FloatField(null=False , default=0)\n    fatContent = models.FloatField(null=False , default=0)\n    fiberContent = models.FloatField(null=False , default=0)\n    proteinContent = models.FloatField(null=False , default=0)\n    saturatedFatContent = models.FloatField(null=False , default=0)\n    sodiumContent = models.FloatField(null=False , default=0)\n    sugarContent = models.FloatField(null=False , default=0)",
        "detail": "healthprofiles.models",
        "documentation": {}
    },
    {
        "label": "HealthProfileSerializer",
        "kind": 6,
        "importPath": "healthprofiles.serializer",
        "description": "healthprofiles.serializer",
        "peekOfCode": "class HealthProfileSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = HealthProfile\n        fields = ['calories' , 'carbohydrateContent' , 'cholesterolContent' , 'fatContent' , 'fiberContent' , 'proteinContent' , 'saturatedFatContent' , 'sodiumContent' , 'sugarContent' , 'condition_name' ]\nclass UserProfileAndHealthProfileSerializer(serializers.ModelSerializer):\n    user = serializers.PrimaryKeyRelatedField(read_only=True, source='userprofile.user')\n    fav_ing_1 = serializers.CharField(max_length=11, source='userprofile.fav_ing_1')\n    fav_ing_2 = serializers.CharField(max_length=11, allow_blank=True, allow_null=True, source='userprofile.fav_ing_2')\n    fav_ing_3 = serializers.CharField(max_length=11, allow_blank=True, allow_null=True, source='userprofile.fav_ing_3')\n    health_condition_1 = serializers.CharField(max_length=41, allow_blank=True, allow_null=True, source='userprofile.health_condition_1')",
        "detail": "healthprofiles.serializer",
        "documentation": {}
    },
    {
        "label": "UserProfileAndHealthProfileSerializer",
        "kind": 6,
        "importPath": "healthprofiles.serializer",
        "description": "healthprofiles.serializer",
        "peekOfCode": "class UserProfileAndHealthProfileSerializer(serializers.ModelSerializer):\n    user = serializers.PrimaryKeyRelatedField(read_only=True, source='userprofile.user')\n    fav_ing_1 = serializers.CharField(max_length=11, source='userprofile.fav_ing_1')\n    fav_ing_2 = serializers.CharField(max_length=11, allow_blank=True, allow_null=True, source='userprofile.fav_ing_2')\n    fav_ing_3 = serializers.CharField(max_length=11, allow_blank=True, allow_null=True, source='userprofile.fav_ing_3')\n    health_condition_1 = serializers.CharField(max_length=41, allow_blank=True, allow_null=True, source='userprofile.health_condition_1')\n    health_condition_2 = serializers.CharField(max_length=41, allow_blank=True, allow_null=True, source='userprofile.health_condition_2')\n    health_condition_3 = serializers.CharField(max_length=41, allow_blank=True, allow_null=True, source='userprofile.health_condition_3')\n    prefered_diet_category = serializers.CharField(max_length=13, allow_blank=True, allow_null=True, source='userprofile.prefered_diet_category')\n    calories = serializers.FloatField(allow_null=True, source='healthprofile.calories')",
        "detail": "healthprofiles.serializer",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "healthprofiles.urls",
        "description": "healthprofiles.urls",
        "peekOfCode": "urlpatterns = [\n    path('' , HealthProfileView.as_view() , name='healthprofiles')\n]",
        "detail": "healthprofiles.urls",
        "documentation": {}
    },
    {
        "label": "HealthProfileView",
        "kind": 6,
        "importPath": "healthprofiles.views",
        "description": "healthprofiles.views",
        "peekOfCode": "class HealthProfileView(APIView):\n    authentication_classes = [JWTAuthentication]\n    permission_classes = [IsAuthenticated]\n    serializer = UserProfileAndHealthProfileSerializer\n    def get(self, request):\n            user = request.user\n            if user is None:\n                return Response({\"message\": \"User not found\"}, status=status.HTTP_404_NOT_FOUND)\n            healthprofile = HealthProfile.objects.filter(user=user).first()\n            userprofile = UserProfile.objects.filter(user=user).first()",
        "detail": "healthprofiles.views",
        "documentation": {}
    },
    {
        "label": "meal_data['RecipeIngredientParts']",
        "kind": 5,
        "importPath": "machine_learning_model.meal_recommendation_system copy",
        "description": "machine_learning_model.meal_recommendation_system copy",
        "peekOfCode": "meal_data['RecipeIngredientParts'] = meal_data['RecipeIngredientParts'].str.lower()\n### Preparing database\ningredient_db = set()\nfor ingredients in meal_data['RecipeIngredientParts']:\n    ingredient_list = ingredients.split(',')\n    ingredient_db.update([ingredient.strip() for ingredient in ingredient_list])\n##### Converting data in to feature vectors\nvectorizer = TfidfVectorizer()\nmeal_vectors = vectorizer.fit_transform(meal_data['RecipeIngredientParts'].values)\n## Importing the recommendation model",
        "detail": "machine_learning_model.meal_recommendation_system copy",
        "documentation": {}
    },
    {
        "label": "ingredient_db",
        "kind": 5,
        "importPath": "machine_learning_model.meal_recommendation_system copy",
        "description": "machine_learning_model.meal_recommendation_system copy",
        "peekOfCode": "ingredient_db = set()\nfor ingredients in meal_data['RecipeIngredientParts']:\n    ingredient_list = ingredients.split(',')\n    ingredient_db.update([ingredient.strip() for ingredient in ingredient_list])\n##### Converting data in to feature vectors\nvectorizer = TfidfVectorizer()\nmeal_vectors = vectorizer.fit_transform(meal_data['RecipeIngredientParts'].values)\n## Importing the recommendation model\nimport joblib\nmodel_filename = \"ingredients-aware-model.pkl\"",
        "detail": "machine_learning_model.meal_recommendation_system copy",
        "documentation": {}
    },
    {
        "label": "vectorizer",
        "kind": 5,
        "importPath": "machine_learning_model.meal_recommendation_system copy",
        "description": "machine_learning_model.meal_recommendation_system copy",
        "peekOfCode": "vectorizer = TfidfVectorizer()\nmeal_vectors = vectorizer.fit_transform(meal_data['RecipeIngredientParts'].values)\n## Importing the recommendation model\nimport joblib\nmodel_filename = \"ingredients-aware-model.pkl\"\nknn = joblib.load(model_filename)\nprint(\"Loading Model\", model_filename)\n# Taking user inputs\nuser_input = input(\"Enter your prefered ingredients (comma-separated): \")\nuser_ingredients = [ingredient.strip().lower() for ingredient in user_input.split(\",\")]",
        "detail": "machine_learning_model.meal_recommendation_system copy",
        "documentation": {}
    },
    {
        "label": "meal_vectors",
        "kind": 5,
        "importPath": "machine_learning_model.meal_recommendation_system copy",
        "description": "machine_learning_model.meal_recommendation_system copy",
        "peekOfCode": "meal_vectors = vectorizer.fit_transform(meal_data['RecipeIngredientParts'].values)\n## Importing the recommendation model\nimport joblib\nmodel_filename = \"ingredients-aware-model.pkl\"\nknn = joblib.load(model_filename)\nprint(\"Loading Model\", model_filename)\n# Taking user inputs\nuser_input = input(\"Enter your prefered ingredients (comma-separated): \")\nuser_ingredients = [ingredient.strip().lower() for ingredient in user_input.split(\",\")]\n# Processing user inputs",
        "detail": "machine_learning_model.meal_recommendation_system copy",
        "documentation": {}
    },
    {
        "label": "model_filename",
        "kind": 5,
        "importPath": "machine_learning_model.meal_recommendation_system copy",
        "description": "machine_learning_model.meal_recommendation_system copy",
        "peekOfCode": "model_filename = \"ingredients-aware-model.pkl\"\nknn = joblib.load(model_filename)\nprint(\"Loading Model\", model_filename)\n# Taking user inputs\nuser_input = input(\"Enter your prefered ingredients (comma-separated): \")\nuser_ingredients = [ingredient.strip().lower() for ingredient in user_input.split(\",\")]\n# Processing user inputs\nuser_vector = vectorizer.transform([', '.join(user_ingredients)])\ndistances, indices = knn.kneighbors(user_vector)\n### Display recommendations",
        "detail": "machine_learning_model.meal_recommendation_system copy",
        "documentation": {}
    },
    {
        "label": "knn",
        "kind": 5,
        "importPath": "machine_learning_model.meal_recommendation_system copy",
        "description": "machine_learning_model.meal_recommendation_system copy",
        "peekOfCode": "knn = joblib.load(model_filename)\nprint(\"Loading Model\", model_filename)\n# Taking user inputs\nuser_input = input(\"Enter your prefered ingredients (comma-separated): \")\nuser_ingredients = [ingredient.strip().lower() for ingredient in user_input.split(\",\")]\n# Processing user inputs\nuser_vector = vectorizer.transform([', '.join(user_ingredients)])\ndistances, indices = knn.kneighbors(user_vector)\n### Display recommendations\nprint(\"Recommended Meals:\")",
        "detail": "machine_learning_model.meal_recommendation_system copy",
        "documentation": {}
    },
    {
        "label": "user_input",
        "kind": 5,
        "importPath": "machine_learning_model.meal_recommendation_system copy",
        "description": "machine_learning_model.meal_recommendation_system copy",
        "peekOfCode": "user_input = input(\"Enter your prefered ingredients (comma-separated): \")\nuser_ingredients = [ingredient.strip().lower() for ingredient in user_input.split(\",\")]\n# Processing user inputs\nuser_vector = vectorizer.transform([', '.join(user_ingredients)])\ndistances, indices = knn.kneighbors(user_vector)\n### Display recommendations\nprint(\"Recommended Meals:\")\nfor idx in indices[0]:\n    print(meal_data.loc[idx, 'Name'])",
        "detail": "machine_learning_model.meal_recommendation_system copy",
        "documentation": {}
    },
    {
        "label": "user_ingredients",
        "kind": 5,
        "importPath": "machine_learning_model.meal_recommendation_system copy",
        "description": "machine_learning_model.meal_recommendation_system copy",
        "peekOfCode": "user_ingredients = [ingredient.strip().lower() for ingredient in user_input.split(\",\")]\n# Processing user inputs\nuser_vector = vectorizer.transform([', '.join(user_ingredients)])\ndistances, indices = knn.kneighbors(user_vector)\n### Display recommendations\nprint(\"Recommended Meals:\")\nfor idx in indices[0]:\n    print(meal_data.loc[idx, 'Name'])",
        "detail": "machine_learning_model.meal_recommendation_system copy",
        "documentation": {}
    },
    {
        "label": "user_vector",
        "kind": 5,
        "importPath": "machine_learning_model.meal_recommendation_system copy",
        "description": "machine_learning_model.meal_recommendation_system copy",
        "peekOfCode": "user_vector = vectorizer.transform([', '.join(user_ingredients)])\ndistances, indices = knn.kneighbors(user_vector)\n### Display recommendations\nprint(\"Recommended Meals:\")\nfor idx in indices[0]:\n    print(meal_data.loc[idx, 'Name'])",
        "detail": "machine_learning_model.meal_recommendation_system copy",
        "documentation": {}
    },
    {
        "label": "conn",
        "kind": 5,
        "importPath": "machine_learning_model.meal_recommendation_system",
        "description": "machine_learning_model.meal_recommendation_system",
        "peekOfCode": "conn = mysql.connector.connect(\n    host=\"localhost\",\n    user=\"root\",\n    password=\"root\",\n    database=\"sample_data\"\n)\nif conn.is_connected():\n    print('Connected to MySQL database')\n    # Load meal data from MySQL\n    meal_data = pd.read_sql('SELECT * FROM mytable', conn)",
        "detail": "machine_learning_model.meal_recommendation_system",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "meals.migrations.0001_initial",
        "description": "meals.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='ingredient',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('ingredient', models.CharField(max_length=100)),",
        "detail": "meals.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "meals.migrations.0002_meal_image_1_meal_image_2_meal_image_3_meal_image_4",
        "description": "meals.migrations.0002_meal_image_1_meal_image_2_meal_image_3_meal_image_4",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"meals\", \"0001_initial\"),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name=\"meal\",\n            name=\"image_1\",\n            field=cloudinary.models.CloudinaryField(\n                blank=True, max_length=255, null=True, verbose_name=\"Image 1\"",
        "detail": "meals.migrations.0002_meal_image_1_meal_image_2_meal_image_3_meal_image_4",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "meals.migrations.0003_remove_meal_image",
        "description": "meals.migrations.0003_remove_meal_image",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"meals\", \"0002_meal_image_1_meal_image_2_meal_image_3_meal_image_4\"),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name=\"meal\",\n            name=\"image\",\n        ),\n    ]",
        "detail": "meals.migrations.0003_remove_meal_image",
        "documentation": {}
    },
    {
        "label": "MealsConfig",
        "kind": 6,
        "importPath": "meals.apps",
        "description": "meals.apps",
        "peekOfCode": "class MealsConfig(AppConfig):\n    default_auto_field = \"django.db.models.BigAutoField\"\n    name = \"meals\"",
        "detail": "meals.apps",
        "documentation": {}
    },
    {
        "label": "keyword",
        "kind": 6,
        "importPath": "meals.models",
        "description": "meals.models",
        "peekOfCode": "class keyword(models.Model):\n    keyword = models.CharField(max_length=100, null=False)\n    created_at = models.DateTimeField(auto_now_add=True)\n    def __str__(self) -> str:\n        return self.keyword\nclass ingredient(models.Model):\n    ingredient = models.CharField(max_length=100, null=False)\n    created_at = models.DateTimeField(auto_now_add=True)\n    def __str__(self) -> str:\n        return self.ingredient",
        "detail": "meals.models",
        "documentation": {}
    },
    {
        "label": "ingredient",
        "kind": 6,
        "importPath": "meals.models",
        "description": "meals.models",
        "peekOfCode": "class ingredient(models.Model):\n    ingredient = models.CharField(max_length=100, null=False)\n    created_at = models.DateTimeField(auto_now_add=True)\n    def __str__(self) -> str:\n        return self.ingredient\n# Create your models here.\nclass Meal(models.Model):\n    name = models.CharField(max_length=100, null=False , unique=True)\n    description = models.TextField(null=False)\n    calories = models.FloatField(null=False , default=0)",
        "detail": "meals.models",
        "documentation": {}
    },
    {
        "label": "Meal",
        "kind": 6,
        "importPath": "meals.models",
        "description": "meals.models",
        "peekOfCode": "class Meal(models.Model):\n    name = models.CharField(max_length=100, null=False , unique=True)\n    description = models.TextField(null=False)\n    calories = models.FloatField(null=False , default=0)\n    carbohydrateContent = models.FloatField(null=False , default=0)\n    cholesterolContent = models.FloatField(null=False , default=0)\n    fatContent = models.FloatField(null=False , default=0)\n    fiberContent = models.FloatField(null=False , default=0)\n    proteinContent = models.FloatField(null=False , default=0)\n    saturatedFatContent = models.FloatField(null=False , default=0)",
        "detail": "meals.models",
        "documentation": {}
    },
    {
        "label": "KeywordSerializer",
        "kind": 6,
        "importPath": "meals.serializers",
        "description": "meals.serializers",
        "peekOfCode": "class KeywordSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = keyword\n        fields = '__all__'\nclass KeywordSerialiserBasic(serializers.ModelSerializer):\n    class Meta :\n        model = keyword\n        fields = ['keyword']\nclass IngredientSerializer(serializers.ModelSerializer):\n    class Meta:",
        "detail": "meals.serializers",
        "documentation": {}
    },
    {
        "label": "KeywordSerialiserBasic",
        "kind": 6,
        "importPath": "meals.serializers",
        "description": "meals.serializers",
        "peekOfCode": "class KeywordSerialiserBasic(serializers.ModelSerializer):\n    class Meta :\n        model = keyword\n        fields = ['keyword']\nclass IngredientSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = ingredient\n        fields = '__all__'\nclass MealSerializer(serializers.ModelSerializer):\n    keywords = serializers.ListField(child=serializers.CharField())",
        "detail": "meals.serializers",
        "documentation": {}
    },
    {
        "label": "IngredientSerializer",
        "kind": 6,
        "importPath": "meals.serializers",
        "description": "meals.serializers",
        "peekOfCode": "class IngredientSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = ingredient\n        fields = '__all__'\nclass MealSerializer(serializers.ModelSerializer):\n    keywords = serializers.ListField(child=serializers.CharField())\n    ingredients = serializers.ListField(child=serializers.CharField())\n    class Meta:\n        model = Meal\n        fields = '__all__'",
        "detail": "meals.serializers",
        "documentation": {}
    },
    {
        "label": "MealSerializer",
        "kind": 6,
        "importPath": "meals.serializers",
        "description": "meals.serializers",
        "peekOfCode": "class MealSerializer(serializers.ModelSerializer):\n    keywords = serializers.ListField(child=serializers.CharField())\n    ingredients = serializers.ListField(child=serializers.CharField())\n    class Meta:\n        model = Meal\n        fields = '__all__'\n    def create(self, validated_data):\n        keywords_data = validated_data.pop('keywords')\n        ingredients_data = validated_data.pop('ingredients')\n        meal = Meal.objects.create(**validated_data)",
        "detail": "meals.serializers",
        "documentation": {}
    },
    {
        "label": "MealSerializerBasic",
        "kind": 6,
        "importPath": "meals.serializers",
        "description": "meals.serializers",
        "peekOfCode": "class MealSerializerBasic(serializers.ModelSerializer):\n    ingredients = serializers.SerializerMethodField()\n    keywords = serializers.SerializerMethodField()\n    class Meta:\n        model = Meal\n        fields = ['id' , 'name' , 'description' ,'image_1' , 'price' , 'ingredients' , 'keywords']\n    def get_ingredients(self, obj):\n        return [ingredient.ingredient for ingredient in obj.ingredients.all()]\n    def get_keywords(self, obj):\n        return [keyword.keyword for keyword in obj.keywords.all()]",
        "detail": "meals.serializers",
        "documentation": {}
    },
    {
        "label": "MealSerializerExtended",
        "kind": 6,
        "importPath": "meals.serializers",
        "description": "meals.serializers",
        "peekOfCode": "class MealSerializerExtended(MealSerializerBasic):\n    class Meta:\n        model = Meal\n        fields = '__all__'\nclass MealListSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Meal\n        fields = ['id' , 'name' ]",
        "detail": "meals.serializers",
        "documentation": {}
    },
    {
        "label": "MealListSerializer",
        "kind": 6,
        "importPath": "meals.serializers",
        "description": "meals.serializers",
        "peekOfCode": "class MealListSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Meal\n        fields = ['id' , 'name' ]",
        "detail": "meals.serializers",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "meals.urls",
        "description": "meals.urls",
        "peekOfCode": "urlpatterns = [\n    path('' , MealView.as_view() , name='meal'),\n    path('<int:pk>' , MealView.as_view() , name='meal'),\n    path('keywords' , KeywordView.as_view() , name=\"Keywords\"),\n    path('list' , MealListView.as_view() , name=\"Meal List\"),\n]",
        "detail": "meals.urls",
        "documentation": {}
    },
    {
        "label": "MealView",
        "kind": 6,
        "importPath": "meals.views",
        "description": "meals.views",
        "peekOfCode": "class MealView(APIView):\n    def get(self , request , pk=None):\n        if pk:\n            meal = Meal.objects.get(id=pk)\n            if meal:\n                serializer = MealSerializerExtended(meal)\n                return Response(serializer.data)\n            else:\n                return Response({\"message\" : \"Meal not found\"} , status=status.HTTP_404_NOT_FOUND)\n        else:",
        "detail": "meals.views",
        "documentation": {}
    },
    {
        "label": "MealListView",
        "kind": 6,
        "importPath": "meals.views",
        "description": "meals.views",
        "peekOfCode": "class MealListView(APIView):\n    def get(self , request):\n        meals = Meal.objects.all()\n        serializer = MealListSerializer(meals , many = True)\n        return Response(serializer.data)\nclass KeywordView(APIView):\n    def get(self , request):\n        try:\n            keywords = keyword.objects.all()\n            if keywords:",
        "detail": "meals.views",
        "documentation": {}
    },
    {
        "label": "KeywordView",
        "kind": 6,
        "importPath": "meals.views",
        "description": "meals.views",
        "peekOfCode": "class KeywordView(APIView):\n    def get(self , request):\n        try:\n            keywords = keyword.objects.all()\n            if keywords:\n                serializer = KeywordSerialiserBasic(keywords , many=True)\n                return Response(serializer.data)\n            else :\n                return Response({\"message : No Data\"} , status=status.HTTP_204_NO_CONTENT)\n        except Exception as e:",
        "detail": "meals.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "orders.migrations.0001_initial",
        "description": "orders.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n        (\"meals\", \"0001_initial\"),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name=\"Order\",\n            fields=[",
        "detail": "orders.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "orders.migrations.0002_alter_order_id",
        "description": "orders.migrations.0002_alter_order_id",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"orders\", \"0001_initial\"),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name=\"order\",\n            name=\"id\",\n            field=models.BigAutoField(\n                auto_created=True, primary_key=True, serialize=False, verbose_name=\"ID\"",
        "detail": "orders.migrations.0002_alter_order_id",
        "documentation": {}
    },
    {
        "label": "OrdersConfig",
        "kind": 6,
        "importPath": "orders.apps",
        "description": "orders.apps",
        "peekOfCode": "class OrdersConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'orders'",
        "detail": "orders.apps",
        "documentation": {}
    },
    {
        "label": "OrderItem",
        "kind": 6,
        "importPath": "orders.models",
        "description": "orders.models",
        "peekOfCode": "class OrderItem(models.Model):\n    order = models.ForeignKey('Order', on_delete=models.CASCADE)\n    meal = models.ForeignKey(Meal, on_delete=models.CASCADE)\n    quantity = models.PositiveIntegerField(default=1)\n    def __str__(self):\n        return f'{self.quantity} x {self.meal.name}'\n# Create your models here.\nclass Order(models.Model):\n    createdAt = models.DateTimeField(auto_now_add=True)\n    user = models.ForeignKey(User, on_delete=models.CASCADE)",
        "detail": "orders.models",
        "documentation": {}
    },
    {
        "label": "Order",
        "kind": 6,
        "importPath": "orders.models",
        "description": "orders.models",
        "peekOfCode": "class Order(models.Model):\n    createdAt = models.DateTimeField(auto_now_add=True)\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    items = models.ManyToManyField('meals.Meal', through='OrderItem')\n    total = models.DecimalField(max_digits=10, decimal_places=2, default=0.00)\n    status = models.CharField(max_length=10, choices=STATUS, default='confirmed')\n    updatedAt = models.DateTimeField(auto_now=True)\n    def __str__(self) -> str:\n        return f'{self.user} - {self.createdAt}'",
        "detail": "orders.models",
        "documentation": {}
    },
    {
        "label": "STATUS",
        "kind": 5,
        "importPath": "orders.models",
        "description": "orders.models",
        "peekOfCode": "STATUS = (\n    ('confirmed', 'Confirmed'),\n    ('completed', 'Completed')\n)\nclass OrderItem(models.Model):\n    order = models.ForeignKey('Order', on_delete=models.CASCADE)\n    meal = models.ForeignKey(Meal, on_delete=models.CASCADE)\n    quantity = models.PositiveIntegerField(default=1)\n    def __str__(self):\n        return f'{self.quantity} x {self.meal.name}'",
        "detail": "orders.models",
        "documentation": {}
    },
    {
        "label": "ItemsOrderSerializer",
        "kind": 6,
        "importPath": "orders.serializers",
        "description": "orders.serializers",
        "peekOfCode": "class ItemsOrderSerializer(serializers.ModelSerializer):\n    id = serializers.IntegerField()\n    quantity = serializers.IntegerField()\n    class Meta:\n        model = Order\n        fields = ['id' , 'quantity']\nclass OrderBasicSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Order\n        fields = ['id' , 'createdAt' , 'total'  , 'status']",
        "detail": "orders.serializers",
        "documentation": {}
    },
    {
        "label": "OrderBasicSerializer",
        "kind": 6,
        "importPath": "orders.serializers",
        "description": "orders.serializers",
        "peekOfCode": "class OrderBasicSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Order\n        fields = ['id' , 'createdAt' , 'total'  , 'status']\nclass UserSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = User\n        fields = ( 'username', 'email')\nclass MealSerializer(serializers.ModelSerializer):\n    class Meta:",
        "detail": "orders.serializers",
        "documentation": {}
    },
    {
        "label": "UserSerializer",
        "kind": 6,
        "importPath": "orders.serializers",
        "description": "orders.serializers",
        "peekOfCode": "class UserSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = User\n        fields = ( 'username', 'email')\nclass MealSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Meal\n        fields = ( 'name', 'price')\nclass OrderItemSerializer(serializers.ModelSerializer):\n    name = serializers.CharField(source='meal.name', read_only=True)",
        "detail": "orders.serializers",
        "documentation": {}
    },
    {
        "label": "MealSerializer",
        "kind": 6,
        "importPath": "orders.serializers",
        "description": "orders.serializers",
        "peekOfCode": "class MealSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Meal\n        fields = ( 'name', 'price')\nclass OrderItemSerializer(serializers.ModelSerializer):\n    name = serializers.CharField(source='meal.name', read_only=True)\n    price = serializers.DecimalField(source='meal.price', read_only=True , max_digits=10, decimal_places=2)\n    image_1 = serializers.ImageField(source='meal.image_1', read_only=True)\n    class Meta:\n        model = OrderItem",
        "detail": "orders.serializers",
        "documentation": {}
    },
    {
        "label": "OrderItemSerializer",
        "kind": 6,
        "importPath": "orders.serializers",
        "description": "orders.serializers",
        "peekOfCode": "class OrderItemSerializer(serializers.ModelSerializer):\n    name = serializers.CharField(source='meal.name', read_only=True)\n    price = serializers.DecimalField(source='meal.price', read_only=True , max_digits=10, decimal_places=2)\n    image_1 = serializers.ImageField(source='meal.image_1', read_only=True)\n    class Meta:\n        model = OrderItem\n        fields = ('name', 'price', 'quantity' , 'image_1')\nclass OrderSerializer(serializers.ModelSerializer):\n    items = OrderItemSerializer(many=True  , source='orderitem_set')  # Use the OrderItemSerializer to serialize related items\n    user = UserSerializer()  # Use the UserSerializer to serialize related users",
        "detail": "orders.serializers",
        "documentation": {}
    },
    {
        "label": "OrderSerializer",
        "kind": 6,
        "importPath": "orders.serializers",
        "description": "orders.serializers",
        "peekOfCode": "class OrderSerializer(serializers.ModelSerializer):\n    items = OrderItemSerializer(many=True  , source='orderitem_set')  # Use the OrderItemSerializer to serialize related items\n    user = UserSerializer()  # Use the UserSerializer to serialize related users\n    class Meta:\n        model = Order\n        fields = ('id', 'createdAt', 'total', 'status',  'user', 'items')",
        "detail": "orders.serializers",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "orders.urls",
        "description": "orders.urls",
        "peekOfCode": "urlpatterns = [\n    path('' , OrderCreateView.as_view() ,  name='order'),\n    path('<int:pk>/' , OrderView.as_view() , name='order'),\n    path('list' , OrderView.as_view() , name='order'),\n    path('last' , LastOrderView.as_view() , name='order'),\n]",
        "detail": "orders.urls",
        "documentation": {}
    },
    {
        "label": "OrderCreateView",
        "kind": 6,
        "importPath": "orders.views",
        "description": "orders.views",
        "peekOfCode": "class OrderCreateView(APIView):\n    authentication_classes = [JWTAuthentication]\n    permission_classes = [IsAuthenticated]\n    def post(self, request, *args, **kwargs):\n        user = request.user\n        data = request.data\n        serializer = ItemsOrderSerializer(data=data, many=True)\n        if serializer.is_valid():\n            # Create an Order instance for the user\n            order = Order.objects.create(",
        "detail": "orders.views",
        "documentation": {}
    },
    {
        "label": "OrderView",
        "kind": 6,
        "importPath": "orders.views",
        "description": "orders.views",
        "peekOfCode": "class OrderView(APIView):\n    authentication_classes = [JWTAuthentication]\n    permission_classes = [IsAuthenticated]\n    def get(self , request , pk=None):\n        user = request.user\n        print(user)\n        if pk:\n            try:\n                order = Order.objects.get(pk=pk)\n                serializer = OrderSerializer(order)",
        "detail": "orders.views",
        "documentation": {}
    },
    {
        "label": "LastOrderView",
        "kind": 6,
        "importPath": "orders.views",
        "description": "orders.views",
        "peekOfCode": "class LastOrderView(APIView):\n    authentication_classes = [JWTAuthentication]\n    permission_classes = [IsAuthenticated]\n    def get(self , request):\n        user = request.user\n        try:\n            latest_order = Order.objects.filter(user=user).latest('createdAt')\n            serializer = OrderSerializer(latest_order)\n            return Response(serializer.data , status=status.HTTP_200_OK)\n        except Order.DoesNotExist:",
        "detail": "orders.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "recommandation.migrations.0001_initial",
        "description": "recommandation.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        (\"auth\", \"0012_alter_user_first_name_max_length\"),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name=\"Recipe\",\n            fields=[\n                (\"RecipeId\", models.IntegerField(primary_key=True, serialize=False)),",
        "detail": "recommandation.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "recommandation.migrations.0002_alter_recipe_aggregatedrating_alter_recipe_authorid_and_more",
        "description": "recommandation.migrations.0002_alter_recipe_aggregatedrating_alter_recipe_authorid_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"recommandation\", \"0001_initial\"),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name=\"recipe\",\n            name=\"AggregatedRating\",\n            field=models.CharField(blank=True, max_length=3, null=True),\n        ),",
        "detail": "recommandation.migrations.0002_alter_recipe_aggregatedrating_alter_recipe_authorid_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "recommandation.migrations.0003_alter_recipe_recipeid",
        "description": "recommandation.migrations.0003_alter_recipe_recipeid",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\n            \"recommandation\",\n            \"0002_alter_recipe_aggregatedrating_alter_recipe_authorid_and_more\",\n        ),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name=\"recipe\",",
        "detail": "recommandation.migrations.0003_alter_recipe_recipeid",
        "documentation": {}
    },
    {
        "label": "RecommandationConfig",
        "kind": 6,
        "importPath": "recommandation.apps",
        "description": "recommandation.apps",
        "peekOfCode": "class RecommandationConfig(AppConfig):\n    default_auto_field = \"django.db.models.BigAutoField\"\n    name = \"recommandation\"",
        "detail": "recommandation.apps",
        "documentation": {}
    },
    {
        "label": "UserProfile",
        "kind": 6,
        "importPath": "recommandation.models",
        "description": "recommandation.models",
        "peekOfCode": "class UserProfile(models.Model):\n    user = models.OneToOneField(User, on_delete=models.CASCADE, primary_key=True)\n    user_name = models.CharField(max_length=22)\n    fav_ing_1 = models.CharField(max_length=11)\n    fav_ing_2 = models.CharField(max_length=11, blank=True, null=True)\n    fav_ing_3 = models.CharField(max_length=11, blank=True, null=True)\n    health_condition_1 = models.CharField(max_length=41, blank=True, null=True)\n    health_condition_2 = models.CharField(max_length=41, blank=True, null=True)\n    health_condition_3 = models.CharField(max_length=41, blank=True, null=True)\n    prefered_diet_category = models.CharField(max_length=13, blank=True, null=True)",
        "detail": "recommandation.models",
        "documentation": {}
    },
    {
        "label": "Review",
        "kind": 6,
        "importPath": "recommandation.models",
        "description": "recommandation.models",
        "peekOfCode": "class Review(models.Model):\n    ReviewId = models.IntegerField(primary_key=True)\n    RecipeId = models.IntegerField()\n    CustomerID = models.IntegerField()\n    CustomerName = models.CharField(max_length=19)\n    Rating = models.IntegerField()\n    Review = models.CharField(max_length=857)\n    DateSubmitted = models.CharField(max_length=20)\n    DateModified = models.CharField(max_length=20)\n    def __str__(self):",
        "detail": "recommandation.models",
        "documentation": {}
    },
    {
        "label": "Recipe",
        "kind": 6,
        "importPath": "recommandation.models",
        "description": "recommandation.models",
        "peekOfCode": "class Recipe(models.Model):\n    RecipeId = models.AutoField(primary_key=True)\n    Name = models.CharField(max_length=65)\n    AuthorId = models.IntegerField(null=True  , blank=True)\n    AuthorName = models.CharField(max_length=20 , null=True  , blank=True)\n    CookTime = models.CharField(max_length=9 , null=True  , blank=True)\n    PrepTime = models.CharField(max_length=8 , null=True  , blank=True)\n    TotalTime = models.CharField(max_length=11 , null=True  , blank=True)\n    DatePublished = models.CharField(max_length=20 , null=True  , blank=True)\n    Description = models.TextField( null=True  , blank=True)",
        "detail": "recommandation.models",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "recommandation.urls",
        "description": "recommandation.urls",
        "peekOfCode": "urlpatterns = [\n    path('', RecommandationView.as_view()),\n]",
        "detail": "recommandation.urls",
        "documentation": {}
    },
    {
        "label": "get_recommendations",
        "kind": 2,
        "importPath": "recommandation.utils",
        "description": "recommandation.utils",
        "peekOfCode": "def get_recommendations(user_id, user_ingredients, meal_data, order_data):\n            recommended_meals = []\n            healthy_meals = []\n            based_on_previous_orders = []\n            order_data = pd.merge(order_data, meal_data, left_on='RecipeId', right_on='RecipeId')\n            print(order_data.columns)\n            reader = Reader(rating_scale=(1, 5))\n            data = Dataset.load_from_df(order_data[['CustomerName', 'Name', 'Rating']], reader)\n            # Prepare database\n            ingredient_db = set()",
        "detail": "recommandation.utils",
        "documentation": {}
    },
    {
        "label": "RecommandationView",
        "kind": 6,
        "importPath": "recommandation.views",
        "description": "recommandation.views",
        "peekOfCode": "class RecommandationView(APIView):\n    permission_classes = [AllowAny]\n    authentication_classes = []\n    def get(self, request : HttpRequest):\n        meal_type = request.GET.getlist('meal' , [])\n        meal_type = [meal.lower() for meal in meal_type]\n        print(meal_type)\n        recommended_meals = []\n        healthy_meals = []\n        based_on_previous_orders = []",
        "detail": "recommandation.views",
        "documentation": {}
    },
    {
        "label": "conn",
        "kind": 5,
        "importPath": "recommandation.views",
        "description": "recommandation.views",
        "peekOfCode": "conn = mysql.connector.connect(\n    host=\"localhost\",\n    user=\"root\",\n    password=\"root\",\n    database=\"research_db\"\n)\nclass RecommandationView(APIView):\n    permission_classes = [AllowAny]\n    authentication_classes = []\n    def get(self, request : HttpRequest):",
        "detail": "recommandation.views",
        "documentation": {}
    },
    {
        "label": "UsersConfig",
        "kind": 6,
        "importPath": "users.apps",
        "description": "users.apps",
        "peekOfCode": "class UsersConfig(AppConfig):\n    default_auto_field = \"django.db.models.BigAutoField\"\n    name = \"users\"",
        "detail": "users.apps",
        "documentation": {}
    },
    {
        "label": "JWTAuthentication",
        "kind": 6,
        "importPath": "users.authentication",
        "description": "users.authentication",
        "peekOfCode": "class JWTAuthentication(BaseAuthentication):\n    def authenticate(self, request):\n        token = self.get_token_from_header(request)\n        if token is None:\n            return None\n        try :\n            payload = jwt.decode(token, settings.JWT_SECRET_KEY, algorithms=settings.JWT_ALGORITHM)\n            user_id = payload.get(\"user_id\")\n            user = User.objects.get(id=user_id)\n            return (user, None)",
        "detail": "users.authentication",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "users.urls",
        "description": "users.urls",
        "peekOfCode": "urlpatterns = [\n    path('login/', JWTLoginView.as_view() , name=\"login\"),\n    path('register/', RegisterView.as_view() , name=\"register\"),\n    path('logout/', LogoutView.as_view() , name=\"logout\"),\n    path('reset-password/', ResetPasswordView.as_view() , name=\"reset-password\"),\n]",
        "detail": "users.urls",
        "documentation": {}
    },
    {
        "label": "generate_access_token",
        "kind": 2,
        "importPath": "users.utils",
        "description": "users.utils",
        "peekOfCode": "def generate_access_token(user):\n    payload = {\n        \"user_id\": user.id,\n        \"username\": user.username,\n        \"exp\": datetime.datetime.utcnow() + settings.JWT_EXPIRATION_DELTA,\t\n    }\n    return jwt.encode(payload, settings.JWT_SECRET_KEY, algorithm=settings.JWT_ALGORITHM)",
        "detail": "users.utils",
        "documentation": {}
    },
    {
        "label": "JWTLoginView",
        "kind": 6,
        "importPath": "users.views",
        "description": "users.views",
        "peekOfCode": "class JWTLoginView(APIView):\n    def post(self, request):\n        username = request.data.get(\"username\")\n        password = request.data.get(\"password\")\n        try:\n            user = User.objects.get(username=username)\n        except User.DoesNotExist:\n            raise AuthenticationFailed(\"User not found!\")\n        if not user.check_password(password):\n            raise AuthenticationFailed(\"Incorrect password!\")",
        "detail": "users.views",
        "documentation": {}
    },
    {
        "label": "RegisterView",
        "kind": 6,
        "importPath": "users.views",
        "description": "users.views",
        "peekOfCode": "class RegisterView(APIView):\n    def post(self, request):\n        username = request.data.get(\"username\")\n        password = request.data.get(\"password\")\n        email = request.data.get(\"email\")\n        if User.objects.filter(username=username).exists():\n            raise AuthenticationFailed(\"Username already exists!\")\n        if User.objects.filter(email=email).exists():\n            raise AuthenticationFailed(\"Email already exists!\")\n        user = User.objects.create(username=username, email=email)",
        "detail": "users.views",
        "documentation": {}
    },
    {
        "label": "LogoutView",
        "kind": 6,
        "importPath": "users.views",
        "description": "users.views",
        "peekOfCode": "class LogoutView(APIView):\n    def post(self, request):\n        response = Response()\n        response.delete_cookie(\"jwt\")\n        response.data = {\n            \"message\": \"success\"\n        }\n        return response\n#view to reset password\nclass ResetPasswordView(APIView):",
        "detail": "users.views",
        "documentation": {}
    },
    {
        "label": "ResetPasswordView",
        "kind": 6,
        "importPath": "users.views",
        "description": "users.views",
        "peekOfCode": "class ResetPasswordView(APIView):\n    def post(self, request):\n        username = request.data.get(\"username\")\n        password = request.data.get(\"password\")\n        try:\n            user = User.objects.get(username=username)\n            user.set_password(password)\n            return Response({\"message\": \"Password reset success!\"})\n        except User.DoesNotExist:\n            raise AuthenticationFailed(\"User not found!\")",
        "detail": "users.views",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "manage",
        "description": "manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"backend.settings\")\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "manage",
        "documentation": {}
    }
]